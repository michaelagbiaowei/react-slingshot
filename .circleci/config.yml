version: 2.1

commands:
  print_pipeline_id:
    description: "This is a re-usable command"
    parameters:
      to:
        type: string
        default: "circle_Workflow_ID"
    steps:
      - checkout
      - run: echo ${CIRCLE_WORKFLOW_ID} << parameters.to >>

orbs:
  welcome: circleci/aws-cli@2.0.3

jobs:
  run_step_on_fail:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            echo "This job will fail because the specified file path does not exit" > /failed_job/fail.txt
      - run:
          name: print fail job
          command: |
            echo "Hello, this job failed!"
          when: on_fail

  circle_Workflow_ID:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - print_pipeline_id

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: |
            aws cloudformation deploy \
            --template-file template.yml \
            --stack-name myStack-${CIRCLE_WORKFLOW_ID} \
            --region us-east-1

  configure_infrastructure:
    docker:
      - image: python:3.9.16-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["15:71:24:06:04:09:fb:98:a5:85:17:31:e3:40:8b:03"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory.txt main.yml

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: run smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL}
            then
              return 0
            else
              return 1
            fi

  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello"

  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Say world"
          command: "echo World!"

  print_env_name:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "echo an env var that is part of our project"
          command: |
            echo ${MY_ENV_NAME}

  save_print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: mkdir -p ~/workspace
      - run:
          command: |
            echo "say hello!" > ~/workspace/hello-output.txt
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - hello-output.txt

  print_hello_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/workspace
      - run: |
          cat ~/workspace/hello-output.txt

  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: buld the node application
          command: |
            npm i
            npm run lint

  test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test the node application
          command: |
            npm i
            npm run test

  analyse:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: analyse the node application
          command: |
            npm audit

workflows:
  hello-workflow:
    jobs:
      # - run_step_on_fail
      # - circle_Workflow_ID
      # requires:
      # - run_step_on_fail
      # - create_infrastructure:
      #     requires:
      #       - circle_Workflow_ID
      # - configure_infrastructure
      # requires:
      #   - create_infrastructure
      - smoke_test
